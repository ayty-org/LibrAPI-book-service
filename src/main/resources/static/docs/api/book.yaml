openapi: 3.0.1
info:
  title: LibrAPI - Book Microservice
  termsOfService: http://swagger.io/terms/
  description: ðŸ“š Book management system made with SpringBoot. ðŸ’³ Phoebus @paystore
    training project in partnership with @ayty-org
  contact:
    email: pedro.sousa@phoebus.com.br
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
  - name: category-controller
    description: Everything about book categories
  - name: book-controller
    description: Everything about all books
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080
  - url: localhost:8080/v2/docs
paths:
  /v1/api/categories/{id}:
    get:
      tags:
        - category-controller
      operationId: findById_1
      summary: Get an existing category by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'
        401:
          description: Unauthorized
        403:
          description: Forbidden
    put:
      tags:
        - category-controller
      operationId: update_2
      summary: Update an existing category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDTO'
        required: true
      responses:
        204:
          description: No Content
        404:
          description: Not Found. Id must be higher than 0 or specified user ID doesn't exist
        401:
          description: Unauthorized
        403:
          description: Forbidden
    delete:
      tags:
        - category-controller
      operationId: delete_2
      summary: Delete an existing purchase
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: No Content
        404:
          description: Not Found. Id must be higher than 0 or specified user ID doesn't exist
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /v1/api/books/{id}:
    get:
      tags:
        - book-controller
      operationId: findById_2
      summary: Get an existing book by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
        401:
          description: Unauthorized
        403:
          description: Forbidden
    put:
      tags:
        - book-controller
      operationId: update_3
      summary: Update an existing book
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDTO'
        required: true
      responses:
        204:
          description: No Content
        404:
          description: Not Found. Id must be higher than 0 or specified user ID doesn't exist
        401:
          description: Unauthorized
        403:
          description: Forbidden
    delete:
      tags:
        - book-controller
      summary: Delete an existing book
      operationId: delete_3
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: No Content
        404:
          description: Not Found. Id must be higher than 0 or specified user ID doesn't exist
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /v1/api/categories:
    get:
      tags:
        - category-controller
      operationId: findAll_2
      summary: Gets all categories without pagination
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDTO'
        401:
          description: Unauthorized
        403:
          description: Forbidden

    post:
      tags:
        - category-controller
      summary: Creates a new category
      operationId: save_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDTO'
        required: true
      responses:
        201:
          description: Created
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /v1/api/books:
    post:
      tags:
        - book-controller
      operationId: save_3
      summary: Creates a new book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDTO'
        required: true
      responses:
        201:
          description: Created
        409:
          description: Conflict. Already exists an book with this ISBN
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /v1/api/books/category/{categoryName}:
    get:
      tags:
        - book-controller
      operationId: findBookByCategoriesName
      summary: Get all books by CATEGORY name
      parameters:
        - name: categoryName
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookDTO'
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /v1/api/books/all:
    get:
      tags:
        - book-controller
      operationId: findAll_3
      summary: Find all books without pagination
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookDTO'
        401:
          description: Unauthorized
        403:
          description: Forbidden
components:
  schemas:
    CategoryDTO:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          maxLength: 50
          minLength: 2
          type: string
    BookDTO:
      required:
        - author
        - availableQuantity
        - category
        - isbn
        - publicationYear
        - sellPrice
        - synopsis
        - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        isbn:
          maxLength: 17
          minLength: 17
          type: string
        title:
          maxLength: 50
          minLength: 1
          type: string
        synopsis:
          maxLength: 120
          minLength: 1
          type: string
        author:
          type: string
        publicationYear:
          type: string
          format: date
        sellPrice:
          minimum: 0
          type: number
          format: double
        availableQuantity:
          minimum: 0
          type: integer
          format: int32
        category:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/CategoryDTO'
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
